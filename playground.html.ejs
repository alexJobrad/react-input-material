<!doctype html>
<%_ /*
    region header
    Copyright Torben Sickert (info["~at~"]torben.website) 16.12.2012

    License
    -------

    This library written by Torben Sickert stand under a creative commons
    naming 3.0 unported license.
    See https://creativecommons.org/licenses/by/3.0/deed.de
    endregion
*/ _%>
<html class="no-javascript" lang="en">
    <head>
        <meta charset="utf-8">
        <!--Prevent browser caching-->
        <meta http-equiv="cache-control" content="no-cache">
        <meta http-equiv="expires" content="0">
        <meta http-equiv="pragma" content="no-cache">
        <title>playground</title>
        <script>
            window.document.documentElement.className =
                window.document.documentElement.className.replace(
                    /(^|\s)no-javascript(\s|$)/, '$1javascript$2'
                );
        </script>
    </head>
    <script>
        window.onload = () => {
            Object.values(reactInputMaterial.index.default)
                .map((component) => component.register())

            for (const domNode of document.querySelectorAll('[name]'))
                domNode.addEventListener('onChange', ({detail}) =>
                    document.querySelector('pre').innerHTML =
                        `${detail.target.name}: ` +
                        JSON.stringify(
                            detail.parameter[0],
                            Object.keys(detail.target.properties).sort(),
                            4
                        )
                )
        }
    </script>
    <body class="no-javascript">
        <script>
            window.document.body.className =
                window.document.body.className.replace(
                    /(^|\s)no-javascript(\s|$)/, '$1javascript$2'
                );
        </script>

        <div style="float: left">

            <generic-input></generic-input>

            <hr/>

            <generic-input name="input1"></generic-input>
            <generic-input model="{name: 'input1Model'}"></generic-input>

            <hr/>

            <generic-input name="input2" value="'value2'"></generic-input>
            <generic-input model="{name: 'input2Model', value: 'value2Model'}">
            </generic-input>

            <hr/>

            <generic-input
                declaration="Disabled"
                disabled
                name="input3"
                value="'value3'"
            ></generic-input>
            <generic-input
                model="{declaration: 'Disabled', mutable: false, name: 'input3Model', value: 'value3Model'}"
            ></generic-input>

            <hr/>

            <generic-input
                declaration="placeholder"
                name="input4"
                placeholder="input4"
                required
            ></generic-input>
            <generic-input
                icon="backup"
                model="{declaration: 'placeholder', name: 'input4Model', nullable: false, value: 'value4Model'}"
                placholder="input4Model"
                trailing-icon="{icon: 'clear', onClick: (event) => {event.preventDefault(); this.value = ''}}"
            ></generic-input>

            <hr/>

            <generic-input
                declaration="pattern"
                description="input5Description"
                icon="search"
                name="input5"
                pattern="a+"
                placeholder="input5Placeholder"
                value="'only a`s allowed'"
            ></generic-input>
            <generic-input
                model="{declaration: 'pattern', description: 'input5ModelDescription', regularExpressionPattern: 'a+', value: 'only a`s allowed'}"
                name="input5Model"
                placeholder="input5ModelPlaceholder"
                trailing-icon="'search'"
            ></generic-input>

            <hr/>

            <generic-input
                declaration="selection"
                description="input6Description"
                name="input6"
                placeholder="input6Placeholder"
                selection="['A', 'B', 'C']"
                required
                value="'A'"
            ></generic-input>
            <generic-input
                model="{declaration: 'selection', description: 'input6ModelDescription', name: 'input6Model', nullable: false, selection: ['A', 'B', 'C'], value: 'A'}"
                placeholder="input6ModelPlaceholder"
            ></generic-input>

            <generic-input
                declaration="selection"
                description="input7Description"
                name="input6"
                selection="{a: 'A', b: 'B', c: 'C'}"
                required
                value="'a'"
            ></generic-input>
            <generic-input
                model="{declaration: 'selection', description: 'input7ModelDescription', name: 'input6Model', nullable: false, selection: {a: 'A', b: 'B', c: 'C'}, value: 'a'}"
            ></generic-input>

        </div>

        <pre style="float: right"></pre>

        <style>
            <%-
                require('material-design-icons/iconfont/material-icons.css')
                    .replace(
                        /(url\()(MaterialIcons-Regular\.[^.]+\))/g,
                        '$1./node_modules/material-design-icons/iconfont/$2'
                    )
             %>
        </style>
    </body>
<html>
<%_ /*
    region vim modline
    vim: set tabstop=4 shiftwidth=4 expandtab:
    vim: foldmethod=marker foldmarker=region,endregion:
    endregion
*/ _%>
